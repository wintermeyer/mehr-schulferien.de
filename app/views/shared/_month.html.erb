<% cache [month, federal_state] do %>
  <% days = month.days.order(:value).reverse_order %>
  <% if days.last.wday == 0 %>
    <% 6.times{days.push(nil)} %>
  <% elsif days.last.wday > 1 %>
    <% (days.last.wday - 1).times{days.push(nil)} %>
  <% end %>
  <% days = days.reverse %>
  <% (((month.days.count % 7) * 7) - month.days.count).times { days.push(nil) } %>

  <div class="row">
    <div class="col-xs-8">
      <h3><%= I18n.t("date.month_names")[month.value] %></h3>
    </div>
    <div class="col-xs-4">
      <h3 class="text-muted"><%= year %></h3>
    </div>
  </div>

  <table class="table table-condensed">
    <thead>
      <tr>
        <% [1,2,3,4,5,6,0].each do |weekday| %>
          <% if WEEKEND_WDAYS.include?(weekday) %>
            <th class="active"><%= I18n.t("date.abbr_day_names")[weekday] %>.</th>    
          <% else %>
            <th><%= I18n.t("date.abbr_day_names")[weekday] %>.</th>    
          <% end %>
        <% end %>
      </tr>
    </thead>
    <tbody>
      <% holiday_vacation_periods = [] %>
      <% days.each_slice(7).to_a.each do |week| %>
        <tr>
          <% week.each do |day| %>
            <% if day.nil? %>
              <% css_class = nil %>
            <% else %>
              <% if day.slots.where(slotable: federal_state).any? %>
                <% css_class = 'success' %>
              <% else %>
                <% css_class = nil %>
              <% end %>
              <% if WEEKEND_WDAYS.include?(day.wday) || day.slots.where(vacation_type_id: VacationType.where(public_holiday: true)).where(slotable: federal_state).any? %>
                <% css_class = 'active' %>
              <% end %>
            <% end %>

            <% if css_class %>
              <td class="text-right <%= css_class %>"><%= day %></td>
            <% else %>
              <td class="text-right"><%= day %></td>
            <% end %>
          <% end %>
        </tr>
      <% end %>
    </tbody>
  </table>

  <% public_holiday_vacation_periods = federal_state.vacation_periods.where(vacation_type_id: VacationType.where(public_holiday: true)).where('start_date > ?', Date.parse("1.#{month}.#{year}") - 1.day).where('start_date < ?', Date.parse("1.#{month}.#{year}").end_of_month + 1.day).joins(:vacation_type).order(:start_date) %>

  <% vacation_periods = federal_state.vacation_periods.where(id: Slot.where(day_id: days).where(vacation_type_id: VacationType.where(public_holiday: false)).pluck(:vacation_period_id)) %>

  <% if vacation_periods.any? %>
    <dl>
      <% vacation_periods.uniq.each do |vacation_period| %>
        <dt><%= "#{vacation_period.vacation_type}:" %></dt>
        <dd><%= l vacation_period.start_date, format: :default %> - <%= l vacation_period.end_date, format: :default %> 
        <span class="badge">
        <%= pluralize(Day.where(value: vacation_period.start_date).first.maximum_vacation_length(federal_state), 'Tag', 'Tage') %>
        </span>
        </dd>
      <% end %>
    </dl>
  <% end %>

  <% if public_holiday_vacation_periods.any? %>
    <p><small>
      <strong>
        <% if public_holiday_vacation_periods.count == 1 %>
          Feiertag:
        <% else %>
          Feiertage:
        <% end %>
      </strong>
      <% public_holiday_vacation_periods.each do |vacation_period| %>
        <% if vacation_period != public_holiday_vacation_periods.last %>
          <%= vacation_period.vacation_type %> (<%= (l vacation_period.start_date, format: :short).strip %>), 
        <% else %>
          <%= vacation_period.vacation_type %> (<%= (l vacation_period.start_date, format: :short).strip %>)
        <% end %> 
      <% end %>
    </small></p>
  <% end %>
<% end %>